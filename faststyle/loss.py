# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/03_loss.ipynb (unless otherwise specified).

__all__ = ['gram', 'get_stl_fs', 'get_cnt_fs', 'StyleLoss', 'ContentLoss', 'TVLoss', 'FastStyleLoss2']

# Cell
from fastai2.basics import *
from faststyle import *

# Cell
def gram(x):
    n,c,h,w = x.size()
    x = x.view(n, c, -1)
    return (x @ x.transpose(1,2))/(c*h*w)

# Cell
#TODO: hardcoded layers
def get_stl_fs(fs): return fs[:-1]
def get_cnt_fs(fs): return fs[-1:]

# Cell
def StyleLoss():
  def _inner(fs, y_fs, sims_fs):
    bs = fs[0].shape[0]
    #TODO: don't forget get_stl_fs
    sims_gs = get_stl_fs([torch.stack([gram(x) for x in stl_t]).mean(axis=0) for stl_t in zip(*sims_fs)])
    pred_gs = get_stl_fs([gram(f) for f in fs])
    assert len(sims_gs) == len(pred_gs)
    stl_losses = [F.mse_loss(g1.repeat(bs,1,1),g2) for g1,g2 in zip(sims_gs,pred_gs)]
    return sum(stl_losses)
  return _inner

# Cell
def ContentLoss():
  def _inner(fs, y_fs, sims_fs):
    return sum([F.mse_loss(*o) for o in zip(*map(get_cnt_fs, [fs,y_fs]))])
  return _inner

# Cell
def TVLoss():
  def _inner(img):
    tv_h = ((img[:,:,1:,:] - img[:,:,:-1,:]).pow(2)).mean()
    tv_w = ((img[:,:,:,1:] - img[:,:,:,:-1]).pow(2)).mean()
    return (tv_h + tv_w)
  return _inner

# Cell
#TODO: Use @func_kwargs
class FastStyleLoss2(Module):
  def __init__(self, get_fs, stl_loss_w=3e5, cnt_loss_w=1, tv_loss_w=20):
    self.stl_loss_fn = StyleLoss()
    self.cnt_loss_fn = ContentLoss()
    self.tv_loss_fn  = TVLoss()
    store_attr(self, 'get_fs,stl_loss_w,cnt_loss_w,tv_loss_w')
    self.metric_names = ['stl', 'cnt', 'tv']

  def forward(self, pred, targ, sims_fs, **kwargs):
    pred_feats,targ_feats = self.get_fs(pred),self.get_fs(targ)
    assert not (pred_feats[0] == targ_feats[0]).all()
    self.stl = self.stl_loss_w*self.stl_loss_fn(pred_feats, targ_feats, sims_fs)
    self.cnt = self.cnt_loss_w*self.cnt_loss_fn(pred_feats, targ_feats, sims_fs)
    self.tv  = self.tv_loss_w *self.tv_loss_fn (pred)
    return self.stl+self.cnt+self.tv